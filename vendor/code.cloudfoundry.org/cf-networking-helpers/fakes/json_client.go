// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"code.cloudfoundry.org/cf-networking-helpers/json_client"
)

type JSONClient struct {
	CloseIdleConnectionsStub        func()
	closeIdleConnectionsMutex       sync.RWMutex
	closeIdleConnectionsArgsForCall []struct {
	}
	DoStub        func(string, string, interface{}, interface{}, string) error
	doMutex       sync.RWMutex
	doArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 interface{}
		arg4 interface{}
		arg5 string
	}
	doReturns struct {
		result1 error
	}
	doReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *JSONClient) CloseIdleConnections() {
	fake.closeIdleConnectionsMutex.Lock()
	fake.closeIdleConnectionsArgsForCall = append(fake.closeIdleConnectionsArgsForCall, struct {
	}{})
	stub := fake.CloseIdleConnectionsStub
	fake.recordInvocation("CloseIdleConnections", []interface{}{})
	fake.closeIdleConnectionsMutex.Unlock()
	if stub != nil {
		fake.CloseIdleConnectionsStub()
	}
}

func (fake *JSONClient) CloseIdleConnectionsCallCount() int {
	fake.closeIdleConnectionsMutex.RLock()
	defer fake.closeIdleConnectionsMutex.RUnlock()
	return len(fake.closeIdleConnectionsArgsForCall)
}

func (fake *JSONClient) CloseIdleConnectionsCalls(stub func()) {
	fake.closeIdleConnectionsMutex.Lock()
	defer fake.closeIdleConnectionsMutex.Unlock()
	fake.CloseIdleConnectionsStub = stub
}

func (fake *JSONClient) Do(arg1 string, arg2 string, arg3 interface{}, arg4 interface{}, arg5 string) error {
	fake.doMutex.Lock()
	ret, specificReturn := fake.doReturnsOnCall[len(fake.doArgsForCall)]
	fake.doArgsForCall = append(fake.doArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 interface{}
		arg4 interface{}
		arg5 string
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.DoStub
	fakeReturns := fake.doReturns
	fake.recordInvocation("Do", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.doMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *JSONClient) DoCallCount() int {
	fake.doMutex.RLock()
	defer fake.doMutex.RUnlock()
	return len(fake.doArgsForCall)
}

func (fake *JSONClient) DoCalls(stub func(string, string, interface{}, interface{}, string) error) {
	fake.doMutex.Lock()
	defer fake.doMutex.Unlock()
	fake.DoStub = stub
}

func (fake *JSONClient) DoArgsForCall(i int) (string, string, interface{}, interface{}, string) {
	fake.doMutex.RLock()
	defer fake.doMutex.RUnlock()
	argsForCall := fake.doArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *JSONClient) DoReturns(result1 error) {
	fake.doMutex.Lock()
	defer fake.doMutex.Unlock()
	fake.DoStub = nil
	fake.doReturns = struct {
		result1 error
	}{result1}
}

func (fake *JSONClient) DoReturnsOnCall(i int, result1 error) {
	fake.doMutex.Lock()
	defer fake.doMutex.Unlock()
	fake.DoStub = nil
	if fake.doReturnsOnCall == nil {
		fake.doReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.doReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *JSONClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.closeIdleConnectionsMutex.RLock()
	defer fake.closeIdleConnectionsMutex.RUnlock()
	fake.doMutex.RLock()
	defer fake.doMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *JSONClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ json_client.JsonClient = new(JSONClient)
